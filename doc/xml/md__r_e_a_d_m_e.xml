<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="md__r_e_a_d_m_e" kind="page">
    <compoundname>md_README</compoundname>
    <title>Arcade</title>
    <detaileddescription>
<para><heading level="2">Other group</heading>
</para><para><ulink url="mailto:charles.raimbault@epitech.eu">charles.raimbault@epitech.eu</ulink></para><para><heading level="2">Explanatory manual</heading>
</para><para>An explanatory manual has been generated by Doxygen in a HTML format in /doc</para><para><heading level="2">Draw.io</heading>
</para><para>Our architecture have been fully represented in a Draw.io : <ulink url="https://www.draw.io/?state=%7B%22ids%22:%5B%221Zq1VpeW_EqprgKpBIExYpuWdQAxUMRU4%22%5D,%22action%22:%22open%22,%22userId%22:%22107942588257674115967%22%7D#G1Zq1VpeW_EqprgKpBIExYpuWdQAxUMRU4">https://www.draw.io/?state=%7B%22ids%22:%5B%221Zq1VpeW_EqprgKpBIExYpuWdQAxUMRU4%22%5D,%22action%22:%22open%22,%22userId%22:%22107942588257674115967%22%7D#G1Zq1VpeW_EqprgKpBIExYpuWdQAxUMRU4</ulink></para><para><heading level="1">How to implement a new graphic library</heading>
</para><para><heading level="2">Configuration files</heading>
</para><para>You must implement 2 configurations files, the first one must contain the path of the sprites you&apos;ll be using, their size, how the sprite can be represented in Ncurses and the path to the lib. It have have to be separated by a line.</para><para><heading level="3">Configuration example</heading>
</para><para>./textures/lib_ncurses.bmp 200 200 ncurses 9 ./lib/lib_arcade_ncurses.so</para><para><hruler/>
</para><para>The second one must represent the &apos;map&apos; that your lib will print, with code representing which part of the configuration file it have to use.</para><para><heading level="4">Map example</heading>
</para><para>1111111111111111111 1222222221222222221 1511211121211121151 1222222222222222221 1211212111112121121 1222212221222122221 1111211101011121111 0001210000000121000 1111210110110121111 0000200104010020000 1111210111110121111 0001210000000121000 1111210111110121111 1222212221222122221 1211211121211121121 1521222223222221251 1121212111112121211 1222212221222122221 1211111121211111121 1222222222222222221 1111111111111111111</para><para><heading level="3">Functions to implement</heading>
</para><para>You must implement a runGraph fonction that will return return true if you want to exit the program, otherwise return false.</para><para>You must implement a translateKey fonction translating the key returned by the events of your lib to a key that will be understood by the core</para><para><heading level="4">Here is the translation</heading>
</para><para>{&apos;a&apos;, 0}, {&apos;b&apos;, 1}, {&apos;c&apos;, 2}, {&apos;d&apos;, 3}, {&apos;e&apos;, 4}, {&apos;f&apos;, 5}, {&apos;g&apos;, 6}, {&apos;h&apos;, 7}, {&apos;i&apos;, 8}, {&apos;j&apos;, 9}, {&apos;k&apos;, 10}, {&apos;l&apos;, 11}, {&apos;m&apos;, 12}, {&apos;n&apos;, 13}, {&apos;o&apos;, 14}, {&apos;p&apos;, 15}, {&apos;q&apos;, 16}, {&apos;r&apos;, 17}, {&apos;s&apos;, 18}, {&apos;t&apos;, 19}, {&apos;u&apos;, 20}, {&apos;v&apos;, 21}, {&apos;w&apos;, 22}, {&apos;x&apos;, 23}, {&apos;y&apos;, 24}, {&apos;z&apos;, 25}, {&apos;0&apos;, 26}, {&apos;1&apos;, 27}, {&apos;2&apos;, 28}, {&apos;3&apos;, 29}, {&apos;4&apos;, 30}, {&apos;5&apos;, 31}, {&apos;6&apos;, 32}, {&apos;7&apos;, 33}, {&apos;8&apos;, 34}, {&apos;9&apos;, 35}, {&apos;Up&apos;, 36}, {&apos;Down&apos;, 37}, {&apos;Right&apos;, 38}, {&apos;Left&apos;, 39}, {&apos;Enter&apos;, 40}, {&apos;Space&apos;, 41}, {&apos;Backspace&apos;, 42}, {&apos;Tab&apos;, 43},</para><para>You must implement all these functions that you can copy / paste from below</para><para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>YourClassName::setIsNewMap(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newMap)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_isNewMap<sp/>=<sp/>newMap;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>YourClassName::getIsNewMap(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_isNewMap);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>YourClassName::setIsNewKey(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newKey)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_isNewKey<sp/>=<sp/>newKey;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>YourClassName::getIsNewKey(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_isNewKey);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>YourClassName::setLastKey(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_key<sp/>=<sp/>key;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>YourClassName::getLastKey(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_key);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>YourClassName::setScore(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>score)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_score<sp/>=<sp/>score;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>YourClassName::getScore()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_score);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>YourClassName::setPathConfig(std::string<sp/>path)<sp/>noexcept</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_pathConfig<sp/>=<sp/>path;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::string<sp/>YourClassName::getPathConfig()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_pathConfig);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>YourClassName::setIsNewPathConfig(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isNewPath)<sp/>noexcept</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_isNewPathConfig<sp/>=<sp/>isNewPath;<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>YourClassName::getIsNewPathConfig()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_isNewPathConfig);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>You must implement these two fonctions respectively</para><para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildMap(std::shared_ptr&lt;std::vector&lt;std::string&gt;&gt;<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setMap(std::shared_ptr&lt;std::vector&lt;std::string&gt;&gt;);</highlight></codeline>
</programlisting></para><para>These fonctions will generate your map in your lib.</para><para><blockquote><para>Keep in mind that some lib does&apos;nt need buildMap, but this fonction will be called BEFORE setMap </para></blockquote></para><para>You need to implement in entryPoint</para><para><programlisting><codeline><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_graphic" kindref="compound">IGraphic</ref><sp/>*<ref refid="_pacman_8cpp_1ad45ed95944f65866db34267fdcc75d14" kindref="member">entryPoint</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>YourClassName<sp/>*instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>YourClassName();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(instance);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><heading level="3">SFML Example</heading>
</para><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_class_s_f_m_l_8hpp" kindref="compound">ClassSFML.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_class_s_f_m_l_1a9d31334eb3c24b7453fe988374fc6dfc" kindref="member">ClassSFML::ClassSFML</ref>():</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_wind(nullptr),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_key(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_isNewPathConfig(false),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_isNewMap(false),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_isNewKey(false)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_wind<sp/>=<sp/>std::make_unique&lt;sf::RenderWindow&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_wind-&gt;create(sf::VideoMode(<ref refid="_i_graphic_8hpp_1a2cd109632a6dcccaa80b43561b1ab700" kindref="member">SCREEN_WIDTH</ref>,<sp/><ref refid="_i_graphic_8hpp_1a6974d08a74da681b3957b2fead2608b8" kindref="member">SCREEN_HEIGHT</ref>),<sp/></highlight><highlight class="stringliteral">&quot;Arcade<sp/>SFML&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_wind-&gt;setPosition(<ref refid="_class_s_f_m_l_8hpp_1aaaa848a048dd4569750fdd18c566dbee" kindref="member">SCREEN_POS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_class_s_f_m_l_1a5eb248810461ef35802776bda0156c7d" kindref="member">ClassSFML::~ClassSFML</ref>()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_wind-&gt;close();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_class_s_f_m_l_1ac7c2384bbf9f13169db316f20745f9d5" kindref="member">ClassSFML::displayGame</ref>()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>_map-&gt;begin();<sp/>it<sp/>!=<sp/>_map-&gt;end();<sp/>++it)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it_sprite<sp/>=<sp/>it-&gt;begin();<sp/>it_sprite<sp/>!=<sp/>it-&gt;end();<sp/>++it_sprite)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it_sprite-&gt;first<sp/>!=<sp/><ref refid="_entity_8hpp_1a35cb4584225a2ee3ef554a9f5fe0e473acfe24a7b308a82835c8a9a9a89bc4ca2" kindref="member">NOTHING</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wind-&gt;draw(it_sprite-&gt;second);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_class_s_f_m_l_1a172e6a454b5a35db05a5a8b3f0e7c939" kindref="member">ClassSFML::getEvent</ref>()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(_wind-&gt;pollEvent(_event))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_event.type<sp/>==<sp/>sf::Event::Closed)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wind-&gt;close();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_event.type<sp/>==<sp/>sf::Event::KeyPressed)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_class_s_f_m_l_1a4b1d53348c79ca38489f9f0f1f62653c" kindref="member">translateKey</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_class_s_f_m_l_1afa4dc363da11512994f5964f53792990" kindref="member">setIsNewKey</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_class_s_f_m_l_1a64c5a966c0dcf53ecc3b3aaabafd7eb9" kindref="member">ClassSFML::runGraph</ref>()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_class_s_f_m_l_1a9f308ab330e1a85913cd17c8ef901d71" kindref="member">getIsNewPathConfig</ref>()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_parsing.<ref refid="class_parsing_config_1a1f4aac7d1b61378fd7339f27408982dd" kindref="member">clearData</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_class_s_f_m_l_1ab47a3c8fb83d5db1640105bd6771c3da" kindref="member">setIsNewPathConfig</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_parsing.<ref refid="class_parsing_config_1abae8ec589bfee18d8c1ac61b56860006" kindref="member">setFilename</ref>(<ref refid="class_class_s_f_m_l_1aa83937866ca263758733952543eb8282" kindref="member">getPathConfig</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_parsing.<ref refid="class_parsing_config_1a33e51177fef58d737983a45af84bcd9f" kindref="member">readFile</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_class_s_f_m_l_1abaed7464c895762705a6803857f3ba60" kindref="member">setMapTexture</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_wind-&gt;isOpen())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_class_s_f_m_l_1a172e6a454b5a35db05a5a8b3f0e7c939" kindref="member">getEvent</ref>())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_class_s_f_m_l_1ab74066896f56b41f0d644c31048bf764" kindref="member">getIsNewMap</ref>())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_class_s_f_m_l_1abaed7464c895762705a6803857f3ba60" kindref="member">setMapTexture</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wind-&gt;clear();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_class_s_f_m_l_1aeadd6368ac5b5d185a09cd1e7c1f9dcc" kindref="member">setIsNewMap</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_wind-&gt;clear();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_class_s_f_m_l_1ac7c2384bbf9f13169db316f20745f9d5" kindref="member">displayGame</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_wind-&gt;display();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_class_s_f_m_l_1abaed7464c895762705a6803857f3ba60" kindref="member">ClassSFML::setMapTexture</ref>()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;DataParsingConfig&gt;<sp/>parsingResult<sp/>=<sp/>_parsing.<ref refid="class_parsing_config_1a5c8ec078b6559d591e4b0b9db489696d" kindref="member">getResult</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_textures.clear();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>parsingResult.begin();<sp/>it<sp/>!=<sp/>parsingResult.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf::Vector2i<sp/>size<sp/>=<sp/>{it-&gt;sizeX,<sp/>it-&gt;sizeY};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;sf::Texture&gt;<sp/>tmp<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>sf::Texture);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp-&gt;loadFromFile(it-&gt;path,<sp/>sf::IntRect(0,<sp/>0,<sp/>size.x,<sp/>size.y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_textures.push_back(std::make_pair(size,<sp/>tmp));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it_y<sp/>=<sp/>_map-&gt;begin();<sp/>it_y<sp/>!=<sp/>_map-&gt;end();<sp/>++it_y)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it_x<sp/>=<sp/>it_y-&gt;begin();<sp/>it_x<sp/>!=<sp/>it_y-&gt;end();<sp/>++it_x)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it_x-&gt;first<sp/>!=<sp/><ref refid="_entity_8hpp_1a35cb4584225a2ee3ef554a9f5fe0e473acfe24a7b308a82835c8a9a9a89bc4ca2" kindref="member">NOTHING</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it_x-&gt;second.setTexture(*_textures.at(it_x-&gt;first<sp/>-<sp/>48).second.get());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it_x-&gt;second.setPosition({x,<sp/>y});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>_textures.at(it_x-&gt;first<sp/>-<sp/>48).second-&gt;getSize().x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>_textures.begin()-&gt;second-&gt;getSize().y;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_class_s_f_m_l_1a1770ece2b45a9b9b7e6c153076b2daa8" kindref="member">ClassSFML::buildMap</ref>(std::shared_ptr&lt;std::vector&lt;std::string&gt;&gt;<sp/>map<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_map<sp/>=<sp/>std::make_unique&lt;std::vector&lt;std::vector&lt;std::pair&lt;char,<sp/>sf::Sprite&gt;&gt;&gt;&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>map-&gt;begin();<sp/>it<sp/>!=<sp/>map-&gt;end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;char,<sp/>sf::Sprite&gt;&gt;<sp/>tmp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it_str<sp/>=<sp/>it-&gt;begin();<sp/>it_str<sp/>!=<sp/>it-&gt;end();<sp/>++it_str)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf::Sprite<sp/>sprite;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp.push_back(std::make_pair(*it_str,<sp/>sprite));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_map-&gt;push_back(tmp);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_class_s_f_m_l_1a9b143e495bdd43f42993cf5b0d492926" kindref="member">ClassSFML::setMap</ref>(std::shared_ptr&lt;std::vector&lt;std::string&gt;&gt;<sp/>map)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!map<sp/>||<sp/>!_map)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it_my_map_y<sp/>=<sp/>_map-&gt;begin();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it_y<sp/>=<sp/>map-&gt;begin();<sp/>it_y<sp/>!=<sp/>map-&gt;end();<sp/>++it_y,<sp/>++it_my_map_y)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it_my_map_x<sp/>=<sp/>it_my_map_y-&gt;begin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it_x<sp/>=<sp/>it_y-&gt;begin();<sp/>it_x<sp/>!=<sp/>it_y-&gt;end();<sp/>++it_x,<sp/>++it_my_map_x)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it_my_map_x-&gt;first<sp/>=<sp/>*it_x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_class_s_f_m_l_1a4b1d53348c79ca38489f9f0f1f62653c" kindref="member">ClassSFML::translateKey</ref>()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/><ref refid="struct_key_s_f_m_l" kindref="compound">KeySFML</ref>[i].<ref refid="struct_key_s_f_m_l_1a774c161b3a06372aa146fe5f4ba9cd4a" kindref="member">code_lib</ref><sp/>!=<sp/>-1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_event.key.code<sp/>==<sp/><ref refid="struct_key_s_f_m_l" kindref="compound">KeySFML</ref>[i].<ref refid="struct_key_s_f_m_l_1a774c161b3a06372aa146fe5f4ba9cd4a" kindref="member">code_lib</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_class_s_f_m_l_1aeb353a7928b673ceb10f12c4d5710305" kindref="member">setLastKey</ref>(<ref refid="struct_key_s_f_m_l" kindref="compound">KeySFML</ref>[i].code_core);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_class_s_f_m_l_1afa4dc363da11512994f5964f53792990" kindref="member">setIsNewKey</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_class_s_f_m_l_1aeadd6368ac5b5d185a09cd1e7c1f9dcc" kindref="member">ClassSFML::setIsNewMap</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newMap)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_isNewMap<sp/>=<sp/>newMap;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_class_s_f_m_l_1ab74066896f56b41f0d644c31048bf764" kindref="member">ClassSFML::getIsNewMap</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_isNewMap);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_class_s_f_m_l_1afa4dc363da11512994f5964f53792990" kindref="member">ClassSFML::setIsNewKey</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newKey)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_isNewKey<sp/>=<sp/>newKey;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_class_s_f_m_l_1a0858bffedeb0ccd39ee911c08ede455d" kindref="member">ClassSFML::getIsNewKey</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_isNewKey);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_class_s_f_m_l_1aeb353a7928b673ceb10f12c4d5710305" kindref="member">ClassSFML::setLastKey</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_key<sp/>=<sp/>key;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_class_s_f_m_l_1a7ebdd83fe2ab4c1feb3788f27a3a1b6e" kindref="member">ClassSFML::getLastKey</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_key);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_class_s_f_m_l_1a42df0bacc5fa82cfc451722332304b50" kindref="member">ClassSFML::setScore</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>score)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_score<sp/>=<sp/>score;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_class_s_f_m_l_1a525c4cf493dfd9d68ea2bba3bd15b7e7" kindref="member">ClassSFML::getScore</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_score);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_class_s_f_m_l_1ac37b544f6179f33994e9fa189e15eea8" kindref="member">ClassSFML::setPathConfig</ref>(std::string<sp/>path)<sp/>noexcept</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_pathConfig<sp/>=<sp/>path;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::string<sp/><ref refid="class_class_s_f_m_l_1aa83937866ca263758733952543eb8282" kindref="member">ClassSFML::getPathConfig</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_pathConfig);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_class_s_f_m_l_1ab47a3c8fb83d5db1640105bd6771c3da" kindref="member">ClassSFML::setIsNewPathConfig</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isNewPath)<sp/>noexcept</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_isNewPathConfig<sp/>=<sp/>isNewPath;<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_class_s_f_m_l_1a9f308ab330e1a85913cd17c8ef901d71" kindref="member">ClassSFML::getIsNewPathConfig</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_isNewPathConfig);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_graphic" kindref="compound">IGraphic</ref><sp/>*<ref refid="_pacman_8cpp_1ad45ed95944f65866db34267fdcc75d14" kindref="member">entryPoint</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_class_s_f_m_l" kindref="compound">ClassSFML</ref><sp/>*instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_class_s_f_m_l_1a9d31334eb3c24b7453fe988374fc6dfc" kindref="member">ClassSFML</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(instance);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
